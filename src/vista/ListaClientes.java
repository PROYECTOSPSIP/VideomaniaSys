/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.TypedQuery;
import javax.swing.table.DefaultTableModel;

import controlador.ClienteController;
import modelo.Cliente;
import modelo.Operadora;

import javax.swing.GroupLayout.Alignment;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.GroupLayout;
import javax.swing.JLabel;
import javax.swing.JComboBox;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.JPanel;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

/**
 *
 * @author elichinita58
 */
public class ListaClientes extends JPanel {

    /**
     * Creates new form ListaClientes
     */
    public ListaClientes() {
    	operadoraList();
        initComponents();
        AddRowDataTable(-1);
    }
    
    
    public void AddRowDataTable(Integer idOperadora){
        DefaultTableModel model =  (DefaultTableModel) jTable1.getModel();
        EntityManagerFactory entityManagerFactory = Persistence.createEntityManagerFactory("VideomaniaSys");
        EntityManager em = entityManagerFactory.createEntityManager();
		ClienteController clienteController = new ClienteController(entityManagerFactory);
		List<Cliente>  listaCliente = null;
		if (idOperadora>0) {
			TypedQuery<Cliente> query = em.createQuery("SELECT c FROM Cliente c WHERE c.idOperadora.idOperadora = :idOperadora", Cliente.class);
			query.setParameter("idOperadora", cmbOperadora.getSelectedIndex());
			listaCliente = query.getResultList();
		} else {
			listaCliente =   clienteController.findClienteEntities();
		}
        Object rowData[] =  new  Object[8];
        for (int i =0; i<listaCliente.size(); i++) {
			rowData[0] = listaCliente.get(i).getIdCliente();
			rowData[1] = listaCliente.get(i).getIdentificacion();
			rowData[2] = listaCliente.get(i).getApellidosCliente();
			rowData[3] = listaCliente.get(i).getNombresCliente();
			rowData[4] = listaCliente.get(i).getTelefonoConvencional();
			rowData[5] = listaCliente.get(i).getTelefeonoCelular();
			rowData[6] = listaCliente.get(i).getIdOperadora().getOperadora();
			rowData[7] = listaCliente.get(i).getEmail();
			model.addRow(rowData);
		}
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jScrollPane1 = new JScrollPane();
        jTable1 = new JTable();
        jTable1.setToolTipText("Listado Clientes");

        jTable1.setModel(new DefaultTableModel(
        	new Object[][] {
        	},
        	new String[] {
        		"CodigoCliente", "Identificacion", "Apellidos", "Nombres", "Convencional", "Operadora", "Celular", "Email"
        	}
        ));
        jScrollPane1.setViewportView(jTable1);
        
        JLabel lblNewLabel = new JLabel("Busqueda Clientes Registrados");
        
        /*if(operadoraList().size() > 0){
			for(Operadora operadora : operadoraList()){
				cmbOperadora.addItem(operadora.getOperadora());
			}
		}*/
        
        panel = new JPanel();
        
        btnConsultar = new JButton("Consultar");
        btnConsultar.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		if (cmbOperadora.getSelectedIndex() >0) {
        			AddRowDataTable(cmbOperadora.getSelectedIndex());
				}
        		
        	}
        });
        

        GroupLayout layout = new GroupLayout(this);
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.TRAILING)
        		.addGroup(layout.createSequentialGroup()
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(layout.createSequentialGroup()
        					.addGap(258)
        					.addComponent(lblNewLabel, GroupLayout.PREFERRED_SIZE, 255, GroupLayout.PREFERRED_SIZE))
        				.addGroup(layout.createSequentialGroup()
        					.addGap(28)
        					.addGroup(layout.createParallelGroup(Alignment.LEADING)
        						.addGroup(layout.createSequentialGroup()
        							.addComponent(panel, GroupLayout.PREFERRED_SIZE, 429, GroupLayout.PREFERRED_SIZE)
        							.addGap(97)
        							.addComponent(btnConsultar))
        						.addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 744, GroupLayout.PREFERRED_SIZE))))
        			.addContainerGap(19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addGroup(layout.createParallelGroup(Alignment.LEADING, false)
        				.addGroup(layout.createSequentialGroup()
        					.addContainerGap()
        					.addComponent(lblNewLabel, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE)
        					.addGap(4)
        					.addComponent(panel, GroupLayout.PREFERRED_SIZE, 68, GroupLayout.PREFERRED_SIZE)
        					.addGap(28))
        				.addGroup(Alignment.TRAILING, layout.createSequentialGroup()
        					.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        					.addComponent(btnConsultar)
        					.addGap(60)))
        			.addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 310, GroupLayout.PREFERRED_SIZE)
        			.addContainerGap(24, Short.MAX_VALUE))
        );
        panel.setLayout(null);
        
        lblOperadora = new JLabel("Operadora:");
        lblOperadora.setBounds(10, 11, 95, 25);
        panel.add(lblOperadora);
        
        cmbOperadora = new JComboBox();
        cmbOperadora.setBounds(128, 13, 114, 25);
        panel.add(cmbOperadora);
        if(operadoraList().size() > 0){
			for(Operadora operadora : operadoraList()){
				cmbOperadora.addItem(operadora.getOperadora());
			}
		}
        this.setLayout(layout);
        
        
    }// </editor-fold>                        


    // Variables declaration - do not modify                     
    private JScrollPane jScrollPane1;
    private JTable jTable1;
    private JPanel panel;
    private JLabel lblOperadora;
    private JComboBox cmbOperadora;
    private JButton btnConsultar;
    
    public List<Operadora> operadoraList(){
		
		EntityManagerFactory entityManagerFactory = Persistence.createEntityManagerFactory("VideomaniaSys");
		EntityManager em = entityManagerFactory.createEntityManager();
		TypedQuery<Operadora> query = em.createNamedQuery("Operadora.findAll", Operadora.class);
		List<Operadora> operadoraList = query.getResultList();
		
		return operadoraList;
	}
    
    public List<Cliente>  buscarClientePorOperadora(){
		EntityManagerFactory entityManagerFactory = Persistence.createEntityManagerFactory("VideomaniaSys");
		EntityManager em = entityManagerFactory.createEntityManager();
		TypedQuery<Cliente> query = em.createQuery("SELECT c FROM Cliente c WHERE c.idOperadora.idOperadora = :idOperadora", Cliente.class);
		
		query.setParameter("idOperadora", cmbOperadora.getSelectedIndex());
		List<Cliente> clienteList = query.getResultList();
		return clienteList;		
	}
}
